package log;

import java.io.IOException;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.rabbitmq.client.AMQP.BasicProperties;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Consumer;
import com.rabbitmq.client.DefaultConsumer;
import com.rabbitmq.client.Envelope;

@Component
public class LogMessageConsumer {
	
	@Autowired
	private LogRepo logRepo;
	
	@Value("${rabbitmq_server}")
	private String mqServer;
	@Value("${rabbitmq_port}")
	private String port;
	@Value("${rabbitmq_user}")
	private String user;
	@Value("${rabbitmq_pw}")
	private String pw;
	@Value("${rabbitmq_loggingqueue}")
	private String queueName;
	
	private Channel logChannel;
	private Connection logConn;
	
	
	public void initConsumeLogMessage(){
		
		try {
			
			logChannel.queueDeclare(queueName, false, false, false, null);
			Consumer consumer = new DefaultConsumer(logChannel){

				@Override
				public void handleDelivery(String consumerTag, Envelope envelope, BasicProperties properties, byte[] body) throws IOException {
					
					LogMessage log = new LogMessage();
					log.setMessage(new String(body));
					
					logRepo.save(log);
				}
				
			};
			
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@PostConstruct
	private void init(){
		try{
			
			ConnectionFactory factory = new ConnectionFactory();
			factory.setHost(mqServer);	
				
			logConn = factory.newConnection();
			logChannel = logConn.createChannel();
			
			initConsumeLogMessage();
			
		}catch (Exception e) {
			System.out.println("Unable to connect to mq server");
			e.printStackTrace();
		}
	}
	
	@PreDestroy
	private void cleanUp(){
		try {
			logConn.close();
			logChannel.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
}



